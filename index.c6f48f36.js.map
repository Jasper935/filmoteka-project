{"mappings":"uvBAIA,SAASA,EAAYC,EAAK,GAIvB,OAAOC,MAAM,wGACZC,MAAMC,GAAMA,EAAIC,SAMjB,SAASC,EAAYC,EAAMN,EAAK,GAI9B,OAAOC,MAAM,yGACZC,MAAMC,GAAMA,EAAIC,SAAQG,OAAMC,GAAKC,QAAQC,IAAIF,KAIlD,SAASG,IACR,OAAOV,MAAM,yGACZC,MAAMC,GAAMA,EAAIC,SAAQG,OAAMC,GAAKC,QAAQC,IAAIF,SC1BpD,IAAAI,EAAAC,EAAA,SACA,IAAIC,EAAO,IAEX,EAAAF,EAAAG,eAAcb,MAAKc,IACjBA,EAAKC,OAAOC,KAAIC,IACdL,EAAKK,EAAGC,IAAMD,EAAGb,YAIrB,EAAAM,EAAAS,eAAcnB,MAAKC,GAMnB,SAA0BmB,GACxB,IAAIC,EAAID,EAAIE,QACV,CAACC,EAAKN,IACHM,EAAO,kGAION,EAAGC,0FAEID,EAAGO,kJAKcP,EAAGQ,qHAIhCR,EAAGS,UAAUV,KAAIW,GACDf,EAAKe,KAClBC,OAAS,EACRX,EAAGS,UACAV,KAAIW,GACW,IAAMf,EAAKe,KAE1BE,MAAM,EAAG,GAAK,WACjBZ,EAAGS,UAAUV,KAAIW,GACD,IAAMf,EAAKe,UAE3BV,EAAGa,aAAaD,MAAM,EAAG,+FAOzC,IAEFE,EAAYC,mBAAmB,YAAaX,GA5CpBY,CAAiBhC,EAAIiC,WAI/C,MAAMH,EAAcI,SAASC,cAAc,YA+E3C7B,QAAQC,KAAI,EAAAE,EAAA2B,aAAY,UAAUrC,MAAKC,GAAOM,QAAQC,IAAIP","sources":["src/js/api/fetchApi.js","src/index.js"],"sourcesContent":["export {fetchTrends, fetchByName, fetchGenres}\nconst key = 'fdee5313a0b876498560bfe4baaab806'\n\n\nfunction fetchTrends(page=1){\n    \n   const url = 'https://developers.themoviedb.org/3/trending/get-trending'\n   \n   return fetch(`https://api.themoviedb.org/3/movie/top_rated?api_key=${key}&language=en-US`)\n   .then((res)=>res.json()) \n// .then(res=>console.log(res)).catch(err=>console.log(err))\n   \n   }\n   \n   \n   function fetchByName(name, page=1){\n   \n    \n   const url = `https://api.themoviedb.org/3/search/movie?api_key=fdee5313a0b876498560bfe4baaab806&query=batman&page=1&include_adult=false`\n     return fetch(`https://api.themoviedb.org/3/genre/movie/list?language=en-US&api_key=fdee5313a0b876498560bfe4baaab806`)\n     .then((res)=>res.json()).catch(err=>console.log(err))\n        \n   }\n   // https://api.themoviedb.org/3/search/movie?${key}&query=${name}&page=1&include_adult=false\n   function fetchGenres(){\n    return fetch(`https://api.themoviedb.org/3/genre/movie/list?language=en-US&api_key=fdee5313a0b876498560bfe4baaab806`)\n    .then((res)=>res.json()).catch(err=>console.log(err))\n   }","import { fetchTrends, fetchByName, fetchGenres } from './js/api/fetchApi';\nlet obj1 = {};\nconst urlImg = 'https://image.tmdb.org/t/p/w500';\nfetchGenres().then(data => {\n  data.genres.map(el => {\n    obj1[el.id] = el.name;\n  });\n});\n\nfetchTrends().then(res => markUpForGallery(res.results));\n\n// fetchByName('batman').then(res => {});\n\nconst galleryItem = document.querySelector('.gallery');\n\nfunction markUpForGallery(arr) {\n  let a = arr.reduce(\n    (acc, el) =>\n      (acc += `<li class=\"gallery__item\">\n\n\n        <a class=\"gallery__link\" href=\"#\">\n          <img id='${el.id}'\n            class=\"gallery__img\"\n            src='${urlImg}${el.poster_path}'\n            alt=\"\"\n            \n          />\n          <div class=\"gallery-text\">\n            <p class=\"gallery-text__title\">${el.original_title}</p>\n            <div class=\"gallery-text__info\">\n\n              <p class=\"gallery-text__genre\"> ${\n                el.genre_ids.map(gen => {\n                  return (gen = obj1[gen]);\n                }).length > 3\n                  ? el.genre_ids\n                      .map(gen => {\n                        return (gen = ' ' + obj1[gen]);\n                      })\n                      .slice(0, 2) + ', Other '\n                  : el.genre_ids.map(gen => {\n                      return (gen = ' ' + obj1[gen]);\n                    })\n              } | ${el.release_date.slice(0, 4)}</p>\n\n              \n            </div>\n          </div>\n        </a>\n        </li>`),\n    ``\n  );\n  galleryItem.insertAdjacentHTML('beforeend', a);\n  //<span class=\"gallery-text__rating\">${el.vote_average}</span>\n}\nfunction markUpForLibrary(arr) {\n  let a = arr.reduce(\n    (acc, el) =>\n      (acc += `<li class=\"gallery__item\">\n        <a class=\"gallery__link\" href=\"#\">\n          <img\n            class=\"gallery__img\"\n            src='${urlImg}${el.poster_path}'\n            alt=\"\"\n            width = '280'\n          />\n          <div class=\"gallery-text\">\n            <p class=\"gallery-text__title\">${el.original_title}</p>\n            <div class=\"gallery-text__info\">\n              <p class=\"gallery-text__genre\"> ${\n                el.genre_ids.map(gen => {\n                  return (gen = obj1[gen]);\n                }).length > 3\n                  ? el.genre_ids\n                      .map(gen => {\n                        return (gen = ' ' + obj1[gen]);\n                      })\n                      .slice(0, 2) + ', Other '\n                  : el.genre_ids.map(gen => {\n                      return (gen = ' ' + obj1[gen]);\n                    })\n              } | ${el.release_date.slice(0, 4)}</p>\n        <span class=\"gallery-text__rating\">${el.vote_average}</span>\n            </div>\n          </div>\n        </a>\n      </li>`),\n    ''\n  );\n  galleryItem.insertAdjacentHTML('beforeend', a);\n}\nconsole.log(fetchByName('batman').then(res => console.log(res)));\n"],"names":["$79e81cc842297628$export$de059b22708f79a1","page","fetch","then","res","json","$79e81cc842297628$export$1458d52a14f48ec4","name","catch","err","console","log","$79e81cc842297628$export$e95d448b93b2cdb","$asUcn","parcelRequire","$1f0dc3b9307be026$var$obj1","fetchGenres","data","genres","map","el","id","fetchTrends","arr","a","reduce","acc","poster_path","original_title","genre_ids","gen","length","slice","release_date","$1f0dc3b9307be026$var$galleryItem","insertAdjacentHTML","$1f0dc3b9307be026$var$markUpForGallery","results","document","querySelector","fetchByName"],"version":3,"file":"index.c6f48f36.js.map"}